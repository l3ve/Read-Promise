class PromiseAplus {
    constructor(executor) {
        this.status = 'pending';
        this.value = undefined;
        this.onFulfills = [];
        this.onRejects = [];

        this.resolve = this.resolve.bind(this);
        this.reject = this.reject.bind(this);
        this.then = this.then.bind(this);
        this.catch = this.catch.bind(this);

        try {
            executor(this.resolve, this.reject);
        } catch (e) {
            this.reject(e);
        }
    }
    resolve(value) {
        setTimeout(() => {
            if (this.status === 'pending') {
                this.status = 'fulfilled';
                this.value = value;
                for (let i = 0; i < this.onFulfills.length; i++) {
                    this.onFulfills[i](value);
                }
            }
        }, 0);
    }
    reject(reason) {
        setTimeout(() => {
            if (this.status === 'pending') {
                this.status = 'rejected';
                this.value = reason;
                for (let i = 0; i < this.onRejects.length; i++) {
                    this.onRejects[i](reason);
                }
            }
        }, 0);
    }
    then(onFulfilled, onRejected) {
        let newPromise;
        onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : function (value) { return value };
        onRejected = typeof onRejected === 'function' ? onRejected : function (reason) { throw reason };
        newPromise = new PromiseAplus((resolve, reject) => {
            if (this.status === 'pending') {
                this.onFulfills.push((value) => {
                    try {
                        let v = onFulfilled(this.value);
                        this.resolvePromise(newPromise, v, resolve, reject);
                    } catch (reason) {
                        reject(reason)
                    }
                });
                this.onRejects.push((reason) => {
                    try {
                        let v = onRejected(this.value);
                        this.resolvePromise(newPromise, v, resolve, reject);
                    } catch (reason) {
                        reject(reason)
                    }
                });
            } else {
                setTimeout(() => {
                    let v;
                    try {
                        if (this.status === 'fulfilled') {
                            v = onFulfilled(this.value);
                        }
                        if (this.status === 'rejected') {
                            v = onRejected(this.value);
                        }
                        this.resolvePromise(newPromise, v, resolve, reject);
                    } catch (reason) {
                        reject(reason);
                    }
                }, 0);
            }
        })
        return newPromise;
    }
    catch(onRejected) {
        return this.then(null, onRejected);
    }
    resolvePromise(newPromise, x, resolve, reject) {
        let isIgnored = false,
            then;
        if (newPromise === x) {
            return reject(new TypeError(''))
        }
        if (x instanceof PromiseAplus) {
            if (x.status === 'pending') {
                x.then((value) => {
                    this.resolvePromise(newPromise, value, resolve, reject);
                }, reject)
            } else {
                x.then(resolve, reject);
            }
            return
        }
        if (x !== null && (typeof x === 'object' || typeof x === 'function')) {
            try {
                then = x.then;
                if (typeof then === 'function') {
                    then.call(x, (y) => {
                        if (isIgnored) return;
                        isIgnored = true;
                        return this.resolvePromise(newPromise, y, resolve, reject);
                    }, (reason) => {
                        if (isIgnored) return;
                        isIgnored = true;
                        return reject(reason);
                    });
                } else {
                    resolve(x);
                }
            } catch (reason) {
                if (isIgnored) return;
                return reject(reason);
            }
        } else {
            resolve(x);
        }
    }
}

//测试用
try {
    module.exports = PromiseAplus
} catch (e) { }

PromiseAplus.deferred = PromiseAplus.defer = function () {
    var dfd = {}
    dfd.promise = new PromiseAplus(function (resolve, reject) {
        dfd.resolve = resolve
        dfd.reject = reject
    })
    return dfd
}